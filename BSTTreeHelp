package test;

import java.io.RandomAccessFile;
import java.util.ArrayList;

public class BSTree {
    Node root;

    public BSTree() {
        root = null;
    }
    
    void clear() {
        root = null;
    }
    
    boolean isEmpty() {
        return root == null;
    }
    Node insert1(Node root, Bird b) {
        if(root == null){
            return new Node(b);
        }
        if(b.getPrice() < root.getInfo().getPrice()){
            root.left = insert1(root.left, b);
        }else if(b.getPrice() > root.getInfo().getPrice()){
            root.right = insert1(root.right, b);
        }else{
            
        }
        return root;
    }
    void insert(int x) {
        Node q = new Node(x);
        if (isEmpty()) {
            root = q;
            return;
        }
        Node p = root, f = null;
        while (p != null) {
            if (p.info == x) 
                return;
            
            f = p;
            if (p.info > x) 
                p = p.left;
            else
                p = p.right;
        }
        
        if (f.info > x) 
            f.left = q;
        else
            f.right = q;
    } 
    
    void preOrder(Node p) {
        if (p == null) return;
        System.out.print(p.info + " ");
        preOrder(p.left);
        preOrder(p.right);
    }
    
    void preOrder() {
        preOrder(root);
        System.out.println();
    }
    
    void inOrder(Node p) {
        if (p == null) return;
        inOrder(p.left);
        System.out.print(p.info + " ");
        inOrder(p.right);
    }
    
    void inOrder() {
        inOrder(root);
        System.out.println();
    }
    
    void postOrder(Node p) {
        if (p == null) return;
        postOrder(p.left);
        postOrder(p.right);
        System.out.print(p.info + " ");
    }
    
    void postOrder() {
        postOrder(root);
        System.out.println();
    }
    int count(Node p) {
        return (p == null) ? 0 : 1 + count(p.left) + count(p.right);
    }
    void BFS() {
        if (isEmpty()) return;
        MyQueue q = new MyQueue();
        q.enqueue(root);
        Node p;
        while (!q.isEmpty()) {
            p = q.dequeue();
            System.out.print(p.info + " ");
            if (p.left != null)
                q.enqueue(p.left);
            if (p.right != null)
                q.enqueue(p.right);
        }
        System.out.println();
    }
    //--------------------------------------------------------------------------
    Node findMostLeftNode(Node root) {
        if (root == null) {
            return null;
        }
        Node leftMostNode = root.left;
        while (leftMostNode != null) {
            leftMostNode = leftMostNode.left;
        }
        if (leftMostNode == null) {
            return root;
        } else {
            return leftMostNode;
        }
    }

    Node deleteNode(Node root, Node p) {
        if (root == null) {
            return null;
        }
        if (p.info.sail < root.info.sail) {
            root.left = deleteNode(root.left, p);
        } else if (p.info.sail > root.info.sail) {
            root.right = deleteNode(root.right, p);
        } else {
            if (root.left == null && root.right == null) {
                return null;
            }
            System.out.println(root.info);
            if (root.left != null && root.right == null) {
                return root.left;
            } else if (root.left == null && root.right != null) {
                return root.right;
            }
            Node leftMostNode = findMostLeftNode(root.right);
            root.info = leftMostNode.info;
            
            root.right = deleteNode(root.right, leftMostNode);
        }
        return root;
    }
---------------------------------------------------------------------
Node findRightMostNode(Node root) {
        if (root == null) {
            return null;
        }
        Node leftMost = root.right;
        while (leftMost != null) {
            leftMost = leftMost.right;
        }
        if (leftMost == null) {
            return root;
        } else {
            return leftMost;
        }
    }

    Node deleteNode(Node root, Node p) {
        if (root == null) {
            return null;
        }
        if (p.info.color < root.info.color) {
            root.left = deleteNode(root.left, p);
        } else if (p.info.color > root.info.color) {
            root.right = deleteNode(root.right, p);
        } else {
            if(root.left == null && root.right == null){
                return null;
            }else if (root.left != null && root.right == null) {
                return root.left;
            } else if (root.left == null && root.right != null) {
                return root.right;
            }
            Node leftMostNode = findRightMostNode(root.left);
            root.info = leftMostNode.info;
            root.left = deleteNode(root.left, leftMostNode);
        }
        return root;
    }
---------------------------------------------------------------------
    void delete(Node x) {
        if (isEmpty()) 
            return;
        Node p = root, f = null;
        while (p != null) {
            if (p.info == x.info) break;
            f = p;
            if (p.info > x.info)
                p = p.left;
            else
                p = p.right;
        }
        if (p == null) return;
        
        // No child
        if (p.left == null && p.right == null) {
            if (f == null) {
                root = null;
                return;
            }
            if (f.left == p)
                f.left = null;
            else
                f.right = null;
        }
        
        // 1 child
        if (p.left != null && p.right == null) {
            if (f == null) {
                root = p.left;
                return;
            }
            if (f.left == p)
                f.left = p.left;
            else
                f.right = p.left;
        } 
        else if (p.left == null && p.right != null) {
            if (f == null) {
                root = p.right;
                return;
            }
            if (f.left == p) 
                f.left = p.right;
            else 
                f.right = p.right;
        }

        // 2 children
        if (p.left != null && p.right != null)
            deleteByCopying(p);
//            deleteByMerging(p);
    }
    Node findSecondNodeHavingLeftChild(Node root, int count){
        if(root == null){
            return null;
        }
        if(root != this.root && root.left != null){
            count++;
            if(count == 2){
                return root;
            }
        }
        Node leftResult = findSecondNodeHavingLeftChild(root.left, count);
        if (leftResult != null) {
            return leftResult;
        }
        return findSecondNodeHavingLeftChild(root.right, count);
    }
    
    
    void deleteByCopying(Node p) {
        Node rightMost = p.left, f = null;
        while (rightMost.right != null) {
            f = rightMost;
            rightMost = rightMost.right;
        }
        p.info = rightMost.info;
        if (f == null)
            p.left = rightMost.left;
        else 
            f.right = rightMost.left;
    }
    
    void deleteByMerging(Node p) {
        Node rightMost = p.left, f = searchParent(p);
        while (rightMost.right != null) rightMost = rightMost.right;
        rightMost.right = p.right;
        if (f == null)
            root = p.left;
        else if (f.left == p)
            f.left = p.left;
        else 
            f.right = p.left;
    }
    //----------------------------------------------------------------
    Node findSecondNodeLeftChild(Node root, int count){
        if(root == null){
            return null;
        }
        if(this.root != root && root.left != null){
            count++;
            if(count == 2){
                return root;
            }
        }
        Node leftResult = findSecondNodeLeftChild(root.left, count);
        if (leftResult != null) {
            return leftResult;
        }
        return findSecondNodeHavingLeftChild(root.right, count);
    }
    Node searchParent(Node a) {
        if (a == null)
            return null;
        Node p = root, f = null;
        while (p != null && p != a) {
            f = p;
            if (p.info.sail > a.info.sail)
                p = p.left;
            else 
                p = p.right;
        }
        return f;
    }
    //------------------------------------------------------------------------------------------------
    int count = 0;

    Node inOrder2(Node p, RandomAccessFile f) throws Exception {
        if (p == null) {
            return null;
        }
        Node leftResult = inOrder2(p.left, f);
        if (leftResult != null) {
            return leftResult;
        }
        count++;
        if (count == 4) {
            return p;
        }
        return inOrder2(p.right, f);
    }
    //-----------------------------------------------------------------------------------------------
    int height() {
        return height(root);
    }
    
    int height(Node p) {
        if (p == null) return 0;
        int l = height(p.left), r = height(p.right);
        return (l > r) ? l + 1 : r + 1;
    }
    
    boolean isAVL(Node p) {
        if (p == null) 
            return true;
        if (Math.abs(height(p.left) - height(p.right)) <= 1) 
            return isAVL(p.left) && isAVL(p.right);
        return false;
    }
    
    Node updateAVL(Node p) {
        if (p == null)
            return null ;
        while (height(p.left) - height(p.right) > 1) {
            p = rotateRight(p);
            p.left = updateAVL(p.left);
            p.right = updateAVL(p.right);
        }
        while (height(p.right) - height(p.left) > 1) {
            p = rotateLeft(p);
            p.left = updateAVL(p.left);
            p.right = updateAVL(p.right);
        }
        return p;
    }
    
    int count() {
        return count(root);
    }
    
    int count(Node p) {
        return (p == null) ? 0 : 1 + count(p.left) + count(p.right);
    }
    
    int min() {
        if (isEmpty()) return 0;
        Node p = root;
        while (p.left != null) p = p.left;
        return p.info;
    }
    
    Node search(Node x) {
        Node p = root;
        while (p != null && p.info != x.info) {
            if (p.info > x.info)
                p = p.left;
            else
                p = p.right;
        }
        return p;
    }
    
    Node searchParent(Node a) {
        if (a == null)
            return null;
        Node p = root, f = null;
        while (p != null && p != a) {
            f = p;
            if (p.info > a.info)
                p = p.left;
            else 
                p = p.right;
        }
        return f;
    }
    
    Node rotateLeft(Node a) {
        if (a == null || a.right == null)
            return a;
        Node b = a.right;
        a.right = b.left;
        b.left = a;
        return b;
    }
    
    void rotateLeftModifier(Node a) {
        Node p = search(a);
        if (p == root) {
            root = rotateLeft(root);
        } else {
            Node parent = searchParent(p);
            Node b = rotateLeft(p);
            if (p != null) {
                if (parent.left == p)
                    parent.left = b;
                else
                    parent.right = b;
            }
        }
    }
    //----------------------------------------------
    Node rotateRight(Node a) {
        if (a == null || a.left == null)
            return a;
        Node b = a.left;
        a.left = b.right;
        b.right = a;
        return b;
    }
    if(searchParent(findSecondNodeLeftChild(root, 0)).left == findSecondNodeLeftChild(root, 0)){
        searchParent(findSecondNodeLeftChild(root, 0)).left = rotateRight(findSecondNodeLeftChild(root, 0));
    }else if(searchParent(findSecondNodeLeftChild(root, 0)).right == findSecondNodeLeftChild(root, 0)){
        searchParent(findSecondNodeLeftChild(root, 0)).right = rotateRight(findSecondNodeLeftChild(root, 0));
    }
    //------------------------------------------------
    void rotateRightModifier(Node a) {
        Node p = search(a);
        if (p == root) {
            root = rotateRight(root);
        } else {
            Node parent = searchParent(p);
            Node b = rotateRight(p);
            if (p != null) {
                if (parent.left == p)
                    parent.left = b;
                else
                    parent.right = b;
            }
        }
    }
    
    void simpleBalance() {
        if (!isAVL(root)) balance(root);
    }
    
    void balance(ArrayList<Node> a, int first, int last){
        if(first > last) return;
        int m = (first + last) /2;
        int x = ((Node)a.get(m)).info;
        insert(x);
        balance(a, first, m-1);
        balance(a, m+1, last);
    }
	
    void balance(Node p){
        ArrayList<Node> a = new ArrayList<>();
        buildArray(a, p);
        int first = 0;
        int last = a.size() - 1;
        MyTree b = new MyTree();
        b.balance(a, first, last);
        root = b.root;
    } 
    
    void buildArray(ArrayList<Node> a, Node p){
        if (p == null) return;
        buildArray(a, p.left);
        a.add(p);
        buildArray(a, p.right);
    }
    
}
